import { autoPrompterParams } from "./bddap.config";
import {
  generatePoemHandler,
  sendMessageHandler,
} from "../src/server/handlers";
import {
  Artifact,
  Conversation,
  BDDAutoPrompter,
  ApplicationInteractionFlowProps,
} from "bdd-autoprompter";
import { v4 as uuidv4 } from "uuid";

// a flow has to take in a list of artifacts and conversations
// by the end of a flow each artifact and conversation must have corresponding results
const poemArtifact: Artifact = {
  name: "Poem generation",
  description:
    "The poem generated by the application based on the held conversation",
  variability: 1, // since the temperature of the poem generation is 1 we set the variability to be 1 here too
  getArtifact: generatePoemHandler,
};

const poemGenerationConversation: Conversation = {
  name: "Poem generation conversation",
  description:
    "The conversation held between the user and the agent that guides them in creating a good poem",
  likelyPersonas: [
    {
      positive: true,
      description: "Someone who really likes flowers",
    },
    {
      positive: false,
      description: "Someone who really likes bombs and death",
    },
  ],
  sendMessage: sendMessageHandler,
};

const conversationPoetryApplicationFlowProps: ApplicationInteractionFlowProps =
  {
    autoPrompterParams,
    main: async (autoPrompterParams) => {
      const bddAutoPrompter = await BDDAutoPrompter.initialise(
        autoPrompterParams
      );
      const conversationId = uuidv4();
      const conversation = await bddAutoPrompter.simulateConversation(
        poemGenerationConversation
      );
      const poemContent = await bddAutoPrompter.fetchArtifactContent(
        poemArtifact
      );
      return bddAutoPrompter;
    },
  };

export default [conversationPoetryApplicationFlowProps]; // only one flow for this application
