import { autoPrompterParams } from "./bddap.config";
import {
  generatePoemHandler,
  sendMessageHandler,
  deleteConversationHandler,
} from "../src/server/handlers";
import {
  LLMArtifact,
  LLMConversation,
  BDDAutoPrompter,
  ApplicationInteractionFlowProps,
  LLMConversationResult,
} from "bdd-autoprompter";
import { v4 as uuidv4 } from "uuid";

const poemGenerationConversation: LLMConversation = {
  name: "Poem generation conversation", // must have corresponding [LLM Conversation] feature in bdd spec
  description:
    "The conversation held between the user and the agent that guides them in creating a good poem",
  likelyPersonas: [
    {
      positive: true,
      description: "Someone who really likes flowers",
    },
    {
      positive: false,
      description: "Someone who really likes bombs and death",
    },
  ],
  sendMessage: sendMessageHandler,
};

// by the end of a flow each artifact and conversation must have corresponding results
const poemArtifact: LLMArtifact = {
  name: "Poem generation", // must have corresponding [LLM Artifact] feature in bdd spec
  description:
    "The poem generated by the application based on the held conversation",
  variability: 1, // since the temperature of the poem generation is 1 we set the variability to be 1 here too
  getArtifact: generatePoemHandler,
};

const conversationPoetryApplicationFlowProps: ApplicationInteractionFlowProps =
  {
    autoPrompterParams,
    main: async (autoPrompterParams) => {
      const bddAutoPrompter = await BDDAutoPrompter.initialise(
        autoPrompterParams
      );

      const poemConversationResults =
        await bddAutoPrompter.simulateConversations(poemGenerationConversation);
      const conversationIds = poemConversationResults.map(
        (result) => result.conversationId
      );
      const poemArtifactResults = await bddAutoPrompter.generateArtifacts(
        poemArtifact,
        conversationIds
      );
      const generatedArtifactsAndConversations = [
        ...poemConversationResults,
        ...poemArtifactResults,
      ];
      return generatedArtifactsAndConversations;
    },
    teardown: (generatedArtifactsAndConversations) => {
      // get all conversationIds and delete them
      const conversationIds = generatedArtifactsAndConversations
        .filter(
          (result): result is LLMConversationResult =>
            "conversationId" in result
        )
        .map((result) => result.conversationId);
      for (const conversationId of conversationIds) {
        deleteConversationHandler(conversationId);
      }
    },
  };

export default [conversationPoetryApplicationFlowProps]; // only one flow for this application
